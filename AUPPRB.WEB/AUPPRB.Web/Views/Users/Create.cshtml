@using AUPPRB.Web.Controllers.Base
@model AUPPRB.Models.ViewModels.UsersModels.UserCommonViewModel
@{
    Layout = null;
}
<style>
    .dropdown-toggle.selectpicker.btn-default {
        width: 270px !important;
    }

    .cafedraAdd {
        margin-left: -15px !important;
        margin-top: 10px !important;
    }

    .form-group.select-group {
        margin: 0 auto !important;
        margin-left: -15px !important;
        margin-top: 7px !important;
        margin-bottom: 7px !important;
    }

    .tree {
        min-height: 20px;
        padding: 19px;
        margin-bottom: 20px;
        background-color: #fbfbfb;
        border: 1px solid #999;
        -webkit-border-radius: 4px;
        -moz-border-radius: 4px;
        border-radius: 4px;
        -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);
        -moz-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);
        box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);
    }

        .tree li {
            list-style-type: none;
            margin: 0;
            padding: 10px 5px 0 5px;
            position: relative;
        }

            .tree li::before, .tree li::after {
                content: '';
                left: -20px;
                position: absolute;
                right: auto;
            }

            .tree li::before {
                border-left: 1px solid #999;
                bottom: 50px;
                height: 100%;
                top: 0;
                width: 1px;
            }

            .tree li::after {
                border-top: 1px solid #999;
                height: 20px;
                top: 25px;
                width: 25px;
            }

            .tree li span {
                -moz-border-radius: 5px;
                -webkit-border-radius: 5px;
                /*border: 1px solid #999;*/
                border-radius: 5px;
                display: inline-block;
                padding: 3px 8px;
                text-decoration: none;
            }

            .tree li.parent_li > span {
                cursor: pointer;
            }

        .tree > ul > li::before, .tree > ul > li::after {
            border: 0;
        }

        .tree li:last-child::before {
            height: 30px;
        }

    /*.tree li.parent_li > span:hover, .tree li.parent_li > span:hover + ul li span {
                background: #eee;
                border: 1px solid #94a0b4;
                color: #000;
            }*/
</style>

<div>
    <ul class="nav nav-tabs" role="tablist">
        <li class="active"><a href="#grund" role="tab" data-toggle="tab">Общие сведения</a></li>
        <li><a href="#rechts" role="tab" data-toggle="tab">Настройка прав доступа</a></li>
    </ul>
    <!-- Tab panes -->
    <div class="tab-content">
        <div class="tab-pane active" id="grund">
            @Html.ValidationSummary(true)
            @Html.HiddenFor(c => c.IsNewUser)

            <div style="margin:50px;">
                <div class="row">
                    <div class="col-md-5">
                        <div class="form-group">
                            <div class="input-group">
                                <div class="input-group-addon"><span class="glyphicon  glyphicon-user"></span></div>
                                @Html.TextBoxFor(m => m.LastName, new { autocomplete = "off", @class = "form-control", @placeholder = "Фамилия" })
                            </div>
                            @Html.ValidationMessageFor(m => m.LastName)
                        </div>
                        <div class="form-group">
                            <div class="input-group">
                                <div class="input-group-addon"><span class="glyphicon  glyphicon-user"></span></div>
                                @Html.TextBoxFor(m => m.FirstName, new { autocomplete = "off", @class = "form-control", @placeholder = "Имя" })
                            </div>
                            @Html.ValidationMessageFor(m => m.FirstName)
                        </div>
                        <div class="form-group">
                            <div class="input-group">
                                <div class="input-group-addon"><span class="glyphicon  glyphicon-user"></span></div>
                                @Html.TextBoxFor(m => m.MiddleName, new { autocomplete = "off", @class = "form-control", @placeholder = "Отчество" })
                            </div>
                            @Html.ValidationMessageFor(m => m.MiddleName)
                        </div>
                        <div class="form-group">
                            <div class="input-group">
                                <div class="input-group-addon"><span class="glyphicon  glyphicon-log-in"></span></div>
                                @Html.TextBoxFor(m => m.Login, new { autocomplete = "off", @class = "form-control", @placeholder = "Логин" })
                            </div>
                            @Html.ValidationMessageFor(m => m.Login)
                        </div>
                        <div class="form-group">
                            <div class="input-group">
                                <div class="input-group-addon"><span class="glyphicon  glyphicon-lock"></span></div>
                                @Html.TextBoxFor(m => m.Password, new { autocomplete = "off", @class = "form-control", @placeholder = "Пароль" })
                            </div>
                            @Html.ValidationMessageFor(m => m.Password)
                        </div>
                        <div class="form-group">
                            <div class="input-group">
                                <div class="input-group-addon"><span class="glyphicon  glyphicon-envelope"></span></div>
                                @Html.TextBoxFor(m => m.Email, new { autocomplete = "off", @class = "form-control", @placeholder = "E-mail" })
                            </div>
                            @Html.ValidationMessageFor(m => m.Email)
                        </div>
                        <div class="form-group">
                            <div class="input-group">
                                <div class="input-group-addon"><span class="glyphicon  glyphicon-phone"></span></div>
                                @Html.TextBoxFor(m => m.Phone, new { autocomplete = "off", @class = "form-control", @placeholder = "Номер телефона" })
                            </div>
                            @Html.ValidationMessageFor(m => m.Phone)
                        </div>
                        <div class="form-group">
                            <div class="input-group">
                                <div class="input-group-addon"><span class="glyphicon  glyphicon-phone-alt"></span></div>
                                @Html.TextBoxFor(m => m.AdditionalPhone, new { autocomplete = "off", @class = "form-control", @placeholder = "Дополнительный номер телефона" })
                            </div>
                            @Html.ValidationMessageFor(m => m.AdditionalPhone)
                        </div>
                        <div class="form-group">
                            <div class="input-group">
                                <div class="input-group-addon"><span class="glyphicon  glyphicon-th-large"></span></div>
                                @Html.TextBoxFor(m => m.Skype, new { autocomplete = "off", @class = "form-control", @placeholder = "Skype" })
                            </div>
                            @Html.ValidationMessageFor(m => m.Skype)
                        </div>
                        <div class="form-group">
                            <div class="input-group">
                                <div class="input-group-addon"><span class="glyphicon  glyphicon-th-large"></span></div>
                                @*@Html.CheckBoxFor(m => m.IsBlocked, new { autocomplete = "off", @class = "form-control" })*@
                                <input class="form-control" type="checkbox" id="IsBlocked" name="IsBlocked" data-label="Заблокировать пользователя" />
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2"></div>
                    <div class="col-md-5">
                        @{
                            if (Model.StudentMeta != null)
                            {
                                <div class="form-group">
                                    <select class="form-control" id="StudentMeta_FacultyId" name="StudentMeta.FacultyId" style="width:300px;"></select>
                                </div>
                                <div class="form-group">
                                    <select class="form-control" id="StudentMeta_SpecialityId" name="StudentMeta.SpecialityId" style="display: none; width: 300px"></select>
                                </div>
                                <div class="form-group">
                                    <select class="form-control" id="StudentMeta_IdSpecialtyMeta" name="StudentMeta.IdSpecialtyMeta" style="display: none; width: 300px"></select>
                                </div>
                                <div class="form-group">
                                    <select class="form-control" id="StudentMeta_FlowId" name="StudentMeta.FlowId" style="display: none; width: 300px"></select>
                                </div>
                                <div class="form-group">
                                    <select class="form-control" id="StudentMeta_GroupId" name="StudentMeta.GroupId" style="display: none; width: 300px"></select>
                                </div>

                                if (Model.StudentMeta.IdSpecialtyMeta == 0)
                                {
                                    <input type="hidden" id="IsNewOrEdit" value="new" />

                                }
                                else
                                {
                                    <input type="hidden" id="IsNewOrEdit" value="edit" />
                                    <input type="hidden" id="editFacultyId" value="@Model.StudentMeta.FacultyId" />
                                    <input type="hidden" id="editSpecialityId" value="@Model.StudentMeta.SpecialityId" />
                                    <input type="hidden" id="editIdSpecialtyMeta" value="@Model.StudentMeta.IdSpecialtyMeta" />
                                    <input type="hidden" id="editFlowId" value="@Model.StudentMeta.FlowId" />
                                    <input type="hidden" id="editGroupId" value="@Model.StudentMeta.GroupId" />


                                }

                                <div class="form-group">
                                    <div class="input-group">
                                        <div class="input-group-addon"><span>Номер студенческого билета</span></div>
                                        @Html.TextBoxFor(m => m.StudentMeta.StudentCardNumber, new { autocomplete = "off", @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.StudentMeta.StudentCardNumber)
                                </div>
                                <div class="form-group">
                                    <div class="input-group">
                                        <div class="input-group-addon"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Номер зачетной книжки</span></div>
                                        @Html.TextBoxFor(m => m.StudentMeta.MarkBookNumber, new { autocomplete = "off", @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.StudentMeta.MarkBookNumber)
                                </div>
                            }
                            else if (Model.PrepodMeta != null)
                            {
                                <input type="hidden" id="IsNewOrEdit" value="prepod" />
                                @Html.HiddenFor(model => model.PrepodMeta.DepartmentsIdsString)

                                <div class="form-group">
                                    <div class="input-group">
                                        @Html.DropDownListFor(m => m.PrepodMeta.DegreeId, (IEnumerable<SelectListItem>)ViewBag.Degree, "---Укажите ученую степень---", new { @class = "selectpicker" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.PrepodMeta.DegreeId)
                                </div>
                                if (Model.PrepodMeta.DepartmentsIds != null)
                                {
                                    <table class="cafedry" style="width: 100%;">

                                        @*@foreach (var departmentsId in Model.PrepodMeta.DepartmentsIds)
                                            {

                                            <tr>
                                                <td>
                                                    <div class="form-group select-group">
                                                        <div class="input-group cafedrastandartselect " style="width: 100px !important;">
                                                            @Html.DropDownList("---Укажите кафедру---", (IEnumerable<selectlistitem>)ViewBag.Dapartments, new { @class = "selectpicker cafedryselect", name = "select" + departmentsId })
                                                        </div>
                                                        <br />
                                                    </div>
                                                    <script>
                                                                            debugger;
                                                                            $('.selectpicker').selectpicker();
                                                                            $("[name=" + select + "@departmentsId" + "]").val("@departmentsId");
                                                    </script>
                                                </td>
                                                <td>
                                                    <button type="button" class='btn btn-default selectminus'>-</button>
                                                </td>
                                            </tr>
                                            }*@
                                        @if (Model.PrepodMeta.DepartmentsIds.Count == 0)
                                        {
                                            <tr>
                                                <td>
                                                    <div class="form-group select-group">
                                                        <div class="input-group cafedrastandartselect" style="width: 100px !important;">
                                                            @Html.DropDownList("---Укажите кафедру---", (IEnumerable<SelectListItem>)ViewBag.Dapartments, new { @class = "selectpicker cafedryselect", name = "select" + 0 })
                                                        </div>
                                                    </div>
                                                </td>
                                                <td></td>
                                            </tr>
                                        }
                                        else
                                        {

                                            foreach (var departmentsId in ViewBag.Dapartments)
                                            {
                                                <tr>
                                                    <td>
                                                        <div class="form-group select-group">
                                                            <div class="input-group cafedrastandartselect " style="width: 100px !important;">
                                                                @Html.DropDownList("---Укажите кафедру---", (IEnumerable<SelectListItem>)departmentsId, new { @class = "selectpicker cafedryselect" })
                                                            </div>
                                                            <br />
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <button type="button" class='btn btn-default selectminus'>-</button>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    </table>

                                }
                                <input class="btn btn-default cafedraAdd" type="button" value="Добавить кафедру">
                                <div class="divObmen" style="display:none;"></div>

                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane " id="rechts">
            @Html.HiddenFor(model => model.Tasks)
            @{
                var bCont = new BaseController();
                var roles = bCont.GetAllRoles();

                <div class="tree well">
                    <ul>
                        @{
                            foreach (var role in roles)
                            {
                                <li>
                                    <span class="spanButton">
                                        <button type="button" class="btn btn-sm btn-info">
                                            <span class=" glyphicon glyphicon-plus"></span>
                                        </button>
                                    </span><span style="color: rgb(66, 139, 202); font-size:18px; font-weight: bold; vertical-align: middle;" class="nameOfRole">@role.Name</span>

                                    <ul>
                                        @{
                                foreach (var task in role.RoleTask.Select(c => c.Task))
                                {
                                    <li><span><input type="checkbox" id="@String.Format(" role_{0}__task_{1}", role.Id, task.Id)" name="@String.Format(" role_{0}__task_{1}", role.Id, task.Id)" value="@task.Id" data-label="@task.Name" /></span></li>
                                }
                                        }

                                    </ul>
                                </li>



                            }
                        }
                    </ul>
                </div>

            }
        </div>
    </div>
</div>



<script type="text/javascript">

    function personSavedComplete(result) {

    }

    $(function () {

        $(".cafedraAdd").on("click", function () {
            debugger;
            $(".divObmen").html("");
            var select = $(".cafedrastandartselect:first select.selectpicker").clone().appendTo($(".divObmen"));
            console.log(select);
            $(".cafedry").append("<tr><td><div class='form-group select-group'><div class='input-group' style='width: 100px!important;'>" + $(".divObmen").html() + "</div></div></td><td><button type='button' class='btn btn-default selectminus'>-</button></td></tr>");
            $('.selectpicker').selectpicker();
            $(".divObmen").html("");
            rowdeletecafedraupdate();
        });

        $(".selectminus").on("click", function () {
            debugger;
            if ($("select.cafedryselect").length > 1) {
                $(this).parent().parent().remove();
            }
        });

        function rowdeletecafedraupdate() {
            $(".selectminus").on("click", function () {
                if ($("select.cafedryselect").length > 1) {
                    $(this).parent().parent().remove();
                }

            });

        }
        $('.tree li:has(ul)').addClass('parent_li').find(' > span.spanButton').attr('title', 'Свернуть');
        $('.tree li.parent_li > span.spanButton').on('click', function (e) {
            var children = $(this).parent('li.parent_li').find(' > ul > li');
            if (children.is(":visible")) {
                children.hide('fast');
                $(this).attr('title', 'Развернуть').find(' > i').addClass('icon-plus-sign').removeClass('icon-minus-sign');
            } else {
                children.show('fast');
                $(this).attr('title', 'Свернуть').find(' > i').addClass('icon-minus-sign').removeClass('icon-plus-sign');
            }
            e.stopPropagation();
        });

        $(".nameOfRole").on("click", function (e) {
            var children = $(this).parent('li.parent_li').find(' > ul > li');

        });
        var inputList = $("input[type=checkbox]");
        for (var i = inputList.length - 1; i >= 0; i--) {
            $(inputList[i]).prettyCheckable();
        }

        $(".nameOfRole").click(function () {
            var children = $(this).parent('li.parent_li').find(' > ul > li');
            if (children.is(":visible")) {
                var countChecked = $(children).find("a").length;
                var checkedsCount = $(children).find("a.checked").length;
                if (countChecked == checkedsCount) {
                    $(children).find("a.checked").removeClass("checked");
                } else {
                    $(children).find("a").addClass("checked");
                }
                $(this).attr('title', 'Развернуть').find(' > i').addClass('icon-plus-sign').removeClass('icon-minus-sign');
            }
        });

        @if (!string.IsNullOrEmpty(Model.Tasks))
        {

                                        @:var tasksmas = "@Model.Tasks";
tasksmas = tasksmas.split(";");
tasksmas).each(function (ind, elem) { if (elem != "") { if (!$("input[value=" + elem + "]:first").is(':checked')) { $("input[value=" + elem + "]:first").next().addClass("checked") } } });


        }
    });
    function GetListOfFaculties(id) {
        $.ajax({
            url: '@Url.Action("GetFacultiesList", "Users")',
            type: "POST",
            async: true,
            beforeSend: ShowLoader(),
            error: HideLoader(),
            success: function (data) {
                if (id == "0") {
                    var items = "<option value='-1' selected='selected'>---Выберите факультет ---</option>";
                }
                else
                    var items = "<option value='-1'>---Выберите факультет ---</option>";
                $.each(data.Faculty, function (i, item) {
                    if (item.Id == id)
                        items += "<option value=\"" + item.Id + "\" selected='selected' >" + item.Name + "</option>";
                    else items += "<option value=\"" + item.Id + "\">" + item.Name + "</option>";
                });
                $("#StudentMeta_FacultyId").html(items);
                document.getElementById("saveButton").disabled = true;
            },

        });
    }

    function GetListOfSpecialities(id) {
        var elem;
        if (editFacultyId == -1)
            elem = $("#StudentMeta_FacultyId").val();
        else elem = editFacultyId;
        $.ajax({
            url: '@Url.Action("GetListOfSpesial", "Users")',
            type: "POST",
            async: true,
            data: { facultyId: elem },
            beforeSend: ShowLoader(),
            error: HideLoader(),
            success: function (data) {
                if (id == 0) {
                    var items = "<option value='-1' selected='selected'>---Выберите специальность ---</option>";
                }
                else
                    var items = "<option value='-1' >---Выберите специальность ---</option>";
                $.each(data.Spec, function (i, item) {
                    if (item.Id == id)
                        items += "<option value=\"" + item.Id + "\" selected='selected'>" + item.Name + "</option>";
                    else
                        items += "<option value=\"" + item.Id + "\">" + item.Name + "</option>";
                });
                $("#StudentMeta_SpecialityId").show();
                $("#StudentMeta_SpecialityId").html(items);
                if (id == "0") {
                    $("#StudentMeta_IdSpecialtyMeta").hide();
                    $("#StudentMeta_FlowId").hide();
                    $("#StudentMeta_GroupId").hide();
                    document.getElementById("saveButton").disabled = true;
                }

            },
        })
    }
    function GetListOfSpezMeta(id) {
        var elem;
        if (editSpecialityId == -1)
            elem = $("#StudentMeta_SpecialityId").val();
        else elem = editSpecialityId;
        $.ajax({
            url: '@Url.Action("GetSpezMetasForSpes", "Users")',
            type: "POST",
            async: true,
            data: { specialostId: elem },
            beforeSend: ShowLoader(),
            error: HideLoader(),
            success: function (data) {
                if (id == "0")
                    var items = "<option value='-1' selected='selected'>---Выберите срок обучения ---</option>";
                else
                    var items = "<option value='-1' >---Выберите срок обучения ---</option>";
                $.each(data.Meta, function (i, item) {
                    if (item.Id == id)
                        items += "<option value=\"" + item.Id + "\" selected='selected'>" + item.GodPostup + " - " + item.GodOkonch + ", " + item.FormOfStudy + "</option>";
                    else
                        items += "<option value=\"" + item.Id + "\" >" + item.GodPostup + " - " + item.GodOkonch + ", " + item.FormOfStudy + "</option>";
                });

                $("#StudentMeta_IdSpecialtyMeta").show();
                $("#StudentMeta_IdSpecialtyMeta").html(items);
                if (id == "0") {
                    $("#StudentMeta_FlowId").hide();
                    $("#StudentMeta_GroupId").hide();
                    document.getElementById("saveButton").disabled = true;
                }

            },
        })

    }
    function GetListOfFlows(number) {
        var elem;
        if (editIdSpecialtyMeta == -1)
            elem = $("#StudentMeta_IdSpecialtyMeta").val();
        else elem = editIdSpecialtyMeta;
        $.ajax({
            url: '@Url.Action("GetPotokiForSpezialnostMeta", "Users")',
            type: 'POST',
            async: true,
            data: { id: elem },
            beforeSend: ShowLoader(),
            error: HideLoader(),
            success: function (data) {
                if (number == "0")
                    var items = "<option value='-1' selected='selected'>----- Выберите поток -----</option>";
                else var items = "<option value='-1' >----- Выберите поток -----</option>";
                $.each(data.Potoki, function (i, item) {
                    if (item.Id == number)
                        items += "<option value=\"" + item.Id + "\" selected='selected'>" + item.Name + "</option>";
                    else items += "<option value=\"" + item.Id + "\" >" + item.Name + "</option>";
                });
                $("#StudentMeta_FlowId").show();
                $("#StudentMeta_FlowId").html(items);
                if (id == 0) {
                    $("#StudentMeta_GroupId").hide();
                    document.getElementById("saveButton").disabled = true;
                }

            },
        })
    }

    function GetListOfGroups(id) {
        var elem;
        if (editFlowId == -1)
            elem = $("#StudentMeta_FlowId").val();
        else elem = editFlowId;
        var elem1;
        if (editIdSpecialtyMeta == -1)
            elem1 = $("#StudentMeta_IdSpecialtyMeta").val();
        else elem1 = editIdSpecialtyMeta;

        $.ajax({
            url: '@Url.Action("GetGroupsForPotok", "Users")',
            type: 'POST',
            async: true,
            data: { idPotok: elem, idSpezMeta: elem1 },
            beforeSend: ShowLoader(),
            error: HideLoader(),
            success: function (data) {
                if (id == "0")
                    var items = "<option value='-1' selected='selected'>----- Выберите группу -----</option>";
                else
                    var items = "<option value='-1' >----- Выберите группу -----</option>";
                $.each(data.Groups, function (i, item) {
                    if (id == item.Id)
                        items += "<option value=\"" + item.Id + "\" selected='selected'>" + item.Name + "</option>";
                    else items += "<option value=\"" + item.Id + "\">" + item.Name + "</option>";
                });
                $("#StudentMeta_GroupId").show();
                $("#StudentMeta_GroupId").html(items);
                if (id == 0)
                    document.getElementById("saveButton").disabled = true;
                else document.getElementById("saveButton").disabled = false;

            },
        })
    }

    function LoadFaculty() {
        debugger;
        if ($("#IsNewOrEdit").attr("value") == "new") {
            GetListOfFaculties("0");
        }
        else if ($("#IsNewOrEdit").attr("value") == "edit") {

            editFacultyId = $("#editFacultyId").attr("value");
            editSpecialityId = $("#editSpecialityId").attr("value");
            editIdSpecialtyMeta = $("#editIdSpecialtyMeta").attr("value");
            editFlowId = $("#editFlowId").attr("value");
            editGroupId = $("#editGroupId").attr("value");

            GetListOfFaculties(editFacultyId);
            GetListOfSpecialities(editSpecialityId);
            GetListOfSpezMeta(editIdSpecialtyMeta);
            GetListOfFlows(editFlowId);
            GetListOfGroups(editGroupId);
            document.getElementById("saveButton").disabled = false;
        } else {

            document.getElementById("saveButton").disabled = false;
        }


    }
    var editFacultyId = -1;
    var editSpecialityId = -1;
    var editIdSpecialtyMeta = -1;
    var editFlowId = -1;
    var editGroupId = -1;

    $(document).ready(function () {

        $('.selectpicker').selectpicker();

        LoadFaculty();

        $("#StudentMeta_FacultyId").change(function (e) {
            GetListOfSpecialities("0");
        });

        $("#StudentMeta_SpecialityId").change(function () {
            GetListOfSpezMeta("0")
        });

        $("#StudentMeta_IdSpecialtyMeta").change(function () {
            GetListOfFlows("0");
        });

        $("#StudentMeta_FlowId").change(function () {
            GetListOfGroups("0");
        });
        $("#StudentMeta_GroupId").change(function () {
            document.getElementById("saveButton").disabled = false;
        })

    });


    function collectionRolesAndTasks() {
        alert();
        var tasks = "";
        $(".parent_li").find("> ul > li").find("a.checked").each(function (ind, elem) {
            tasks += $(elem).parent().find("input[type=checkbox]").val() + ";";

        });
        $("#Tasks").val(tasks);


        //кафедры

        var departmentsIds = "";
        $("select.selectpicker.cafedryselect").each(function (ind, elem) {
            departmentsIds += $(elem).val() + ";";
        });
        console.log(departmentsIds);
        $("#PrepodMeta_DepartmentsIdsString").val(departmentsIds);

    }

    function BeginSaveUser() {
        debugger;

    }

</script>
